import * as cdk from "aws-cdk-lib";
import * as lambdanode from "aws-cdk-lib/aws-lambda-nodejs";
import * as lambda from "aws-cdk-lib/aws-lambda";
import * as s3 from "aws-cdk-lib/aws-s3";
import * as s3n from "aws-cdk-lib/aws-s3-notifications";
import * as events from "aws-cdk-lib/aws-lambda-event-sources";
import * as sqs from "aws-cdk-lib/aws-sqs";
import * as sns from "aws-cdk-lib/aws-sns";
import * as subs from "aws-cdk-lib/aws-sns-subscriptions";
import * as dynamodb from "aws-cdk-lib/aws-dynamodb";

import { Construct } from "constructs";

/**
 * EDA Application Stack for Photo Gallery
 * Stage 2: Log New Images Functionality
 */
export class EDAAppStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // S3 Bucket for storing images
    const imagesBucket = new s3.Bucket(this, "images", {
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      autoDeleteObjects: true,
      publicReadAccess: false,
    });

    // DynamoDB table for storing image metadata
    const imagesTable = new dynamodb.Table(this, "ImagesTable", {
      partitionKey: { name: "id", type: dynamodb.AttributeType.STRING },
      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      stream: dynamodb.StreamViewType.NEW_AND_OLD_IMAGES,
    });

    // SNS Topic for messaging
    const newImageTopic = new sns.Topic(this, "NewImageTopic", {
      displayName: "New Image Topic",
    });

    // SQS Queue for valid image processing
    const validImageQueue = new sqs.Queue(this, "ValidImageQueue", {
      receiveMessageWaitTime: cdk.Duration.seconds(10),
    });

    // Lambda Function for logging images
    const logImageFn = new lambdanode.NodejsFunction(
      this,
      "LogImageFunction",
      {
        runtime: lambda.Runtime.NODEJS_18_X,
        entry: `${__dirname}/../lambdas/logImage.ts`,
        timeout: cdk.Duration.seconds(15),
        memorySize: 128,
        environment: {
          IMAGES_TABLE: imagesTable.tableName,
        },
      }
    );

    // S3 -> SNS: Send object creation events to SNS topic
    imagesBucket.addEventNotification(
      s3.EventType.OBJECT_CREATED,
      new s3n.SnsDestination(newImageTopic)
    );

    // SNS -> SQS: Subscribe queue to SNS topic with filter
    newImageTopic.addSubscription(
      new subs.SqsSubscription(validImageQueue, {
        filterPolicy: {
          "s3:ObjectCreated:*": sns.SubscriptionFilter.existsFilter(),
        },
      })
    );

    // SQS -> Lambda: Process valid image events
    const validImageEventSource = new events.SqsEventSource(validImageQueue, {
      batchSize: 5,
      maxBatchingWindow: cdk.Duration.seconds(5),
    });
    logImageFn.addEventSource(validImageEventSource);

    // Permissions
    imagesBucket.grantRead(logImageFn);
    imagesTable.grantReadWriteData(logImageFn);

    // Outputs
    new cdk.CfnOutput(this, "bucketName", {
      value: imagesBucket.bucketName,
    });
    
    new cdk.CfnOutput(this, "tableName", {
      value: imagesTable.tableName,
    });
    
    new cdk.CfnOutput(this, "topicArn", {
      value: newImageTopic.topicArn,
    });
  }
}
